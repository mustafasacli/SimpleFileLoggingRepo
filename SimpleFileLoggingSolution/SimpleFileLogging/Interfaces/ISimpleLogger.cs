////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	Interfaces\ISimpleLogger.cs
//
// summary:	Implements the simple logger class
////////////////////////////////////////////////////////////////////////////////////////////////////

namespace SimpleFileLogging.Interfaces
{
    using System;
    using System.Collections.Generic;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for simple logger. </summary>
    ///
    /// <remarks>   Msacli, 29.04.2019. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    public interface ISimpleLogger
    {
        /// <summary>
        /// Enables Method Grouping
        /// if it is true AssemblyFolder\ClassName\MethodName\Error-Info-Debug\logfile.
        /// else AssemblyFolder\Error-Info-Debug\ClassName\MethodName\logfile.
        /// </summary>
        bool EnableMethodGrouping
        { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Logs an error. </summary>
        ///
        /// <param name="e">    An Exception to process. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        void LogError(Exception e);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Logs an error. </summary>
        ///
        /// <param name="messages"> A variable-length parameters list containing messages. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        void LogError(params string[] messages);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Errors. </summary>
        ///
        /// <param name="e">        An Exception to process. </param>
        /// <param name="messages"> A variable-length parameters list containing messages. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        void Error(Exception e, params string[] messages);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Logs an error. </summary>
        ///
        /// <param name="messages"> A variable-length parameters list containing messages. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        void Error(params string[] messages);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Debugs the given dictionary. </summary>
        ///
        /// <param name="messages"> A variable-length parameters list containing messages. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        void Debug(params string[] messages);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Debugs the given dictionary. </summary>
        ///
        /// <param name="dictionary">   The dictionary. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        void Debug(Dictionary<string, string> dictionary);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Infoes the given dictionary. </summary>
        ///
        /// <param name="messages"> A variable-length parameters list containing messages. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        void Info(params string[] messages);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Infoes the given dictionary. </summary>
        ///
        /// <param name="dictionary">   The dictionary. </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        void Info(Dictionary<string, string> dictionary);
    }
}